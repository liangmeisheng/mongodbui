import axios from 'axios'
import { message } from 'antd'
import ReactDOM from "react-dom/client";
import { useEffect } from 'react';
import store from '@/global'
import type {doc,dbMap} from '@/global/types'
import type {AxiosError} from 'axios'
import type {CancelTokenSource} from "axios"
function errorHandler(err:AxiosError) { // 这里是返回状态码不为200时候的错误处理
  if (err && err.response) {
    switch (err.response.status) {
      case 400:
        err.message = '请求错误'
        break
      case 401:
        err.message =  '请重新登录'
        return
      case 403:
        err.message = '拒绝访问'
        break
      case 404:
        err.message = `请求地址出错: ${err.response.config.url}`
        break
      case 408:
        err.message = '请求超时'
        break
      case 500:
        err.message = '服务器内部错误'
        break
      case 501:
        err.message = '服务未实现'
        break
      case 502:
        err.message = '网关错误'
        break
      case 503:
        err.message = '服务不可用'
        break
      case 504:
        err.message = '网关超时'
        break
      case 505:
        err.message = 'HTTP版本不受支持'
        break
      default:
    }
  }
  if(err.code !== "ERR_CANCELED"){
    store.messageApi.open({
      type: 'error',
      content: err.message,
    })
  }

  return Promise.reject(err)
}

const cancelMap:Record<string,CancelTokenSource> = {}
axios.interceptors.request.use(config=>{
  const {url = ''} = config
  if(cancelMap[url]){
    cancelMap[url].cancel('取消竞态')
  }
  const source =  axios.CancelToken.source();
  cancelMap[url] = source
  config.cancelToken = source.token
  return config
})

axios.interceptors.response.use(res => {
  console.log('拦截器')
  let data = res.data
  if (data[0]) {//错误处理
    store.messageApi.open({
      type: 'error',
      content: data[0],
    })
    return Promise.reject()
  } else {
    return res.data[1]
  }

}, errorHandler)

const base = '/question'
axios.defaults.baseURL = '/api'
//autoStart
export function getDbandcollection() {
  return axios.post<any,[dbMap,{totalSize:number}]>('/getDbAndCollections')
}

export function dropCollection(dbName: string, colName: string) {
  return axios.post('/dropCollection', {
      dbName, colName
  })
}
export function createColletion(dbName: string, colName: string) {
  return axios.post('/createColletion', {
    dbName, colName
  })
}

export function findDocumnet(dbName: string, colName: string,  skip: number,limit: number) {
  return axios.post<any,doc[]>('/findDocumnet', {
      dbName, colName, limit, skip
  })
}
export function deleteDocument(dbName:string,colName:string,id:string){
  return axios.post('/deleteDocument', {
    dbName, colName, id
})
}
//autoEnd